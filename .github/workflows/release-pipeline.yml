name: decentralized-feeder-release-pipeline

on:
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  deployments: write
  id-token: none

jobs:
  push_image_and_deploy:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - uses: actions/checkout@v4

      # Get release tag
      - name: Get Release Tag
        run: |
          RELEASE_TAG=${GITHUB_REF#refs/tags/}
          echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_ENV

      # Checkout the lumina-infra repository
      - name: Checkout lumina-infra repository
        env:
          LUMINA_INFRA_PAT: ${{ secrets.LUMINA_INFRA_PAT }}
        run: |
          git clone -q https://$LUMINA_INFRA_PAT@github.com/diadata-org/lumina-infra lumina-infra

      # IBM Cloud Setup
      - name: Install IBM Cloud CLI
        run: |
          curl -fsSL https://clis.cloud.ibm.com/install/linux | sh
          ibmcloud plugin install container-registry -f

      - name: Log in to IBM Cloud
        env:
          IBM_CLOUD_API_KEY: ${{ secrets.IBM_CLOUD_API_KEY }}
        run: |
          ibmcloud login --apikey $IBM_CLOUD_API_KEY --no-region
          ibmcloud target -r us-south
          ibmcloud target -g Default

      # Build and Push to IBM Cloud Registry
      - name: Build and Tag Docker images
        run: |
          docker build -f build/Dockerfile-luminaScraperFeeder -t us.icr.io/dia-registry/oracles/diadecentraloracleservice:${{ env.RELEASE_TAG }} .
          docker build -f build/Dockerfile-luminaSimulationFeeder -t us.icr.io/dia-registry/oracles/luminasimulationfeeder:${{ env.RELEASE_TAG }} .

      - name: Push Docker images to IBM
        run: |
          ibmcloud cr login
          docker push us.icr.io/dia-registry/oracles/diadecentraloracleservice:${{ env.RELEASE_TAG }}
          docker push us.icr.io/dia-registry/oracles/luminasimulationfeeder:${{ env.RELEASE_TAG }}

      # Docker Hub Setup and Push
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and Push AMD64 images to Docker Hub
        run: |
          docker build -f build/Dockerfile-luminaScraperFeeder \
            -t diadata/decentralized-feeder:scraper-${{ github.event.release.tag_name }}-amd64 .
          docker push diadata/decentralized-feeder:scraper-${{ github.event.release.tag_name }}-amd64

          docker build -f build/Dockerfile-luminaSimulationFeeder \
            -t diadata/decentralized-feeder:simulation-${{ github.event.release.tag_name }}-amd64 .
          docker push diadata/decentralized-feeder:simulation-${{ github.event.release.tag_name }}-amd64

      - name: Build and Push ARM64 images to Docker Hub
        run: |
          docker buildx build --platform linux/arm64 -f build/Dockerfile-luminaScraperFeeder \
            -t diadata/decentralized-feeder:scraper-${{ github.event.release.tag_name }}-arm64 --push .

          docker buildx build --platform linux/arm64 -f build/Dockerfile-luminaSimulationFeeder \
            -t diadata/decentralized-feeder:simulation-${{ github.event.release.tag_name }}-arm64 --push .

      - name: Logout from Docker Hub
        run: docker logout

      # Kubernetes Setup
      - name: Install kubectl
        run: |
          curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      # IBM Cluster Deployment
      - name: IBM Cluster kubectl config
        env:
          TOKEN: ${{ secrets.K8S_SERVICE_ACCOUNT_TOKEN_PROD }}
          CLUSTER_NAME: ${{ secrets.K8s_CLUSTER_NAME_IBM }}
          CONTEXT: ${{ secrets.K8s_CONTEXT_IBM }}
          API_SERVER: ${{ secrets.K8S_API_SERVER_IBM }}
          KUBE_CA_CERT_BASE64: ${{ secrets.KUBE_CA_CERT_BASE64_IBM }}
          SERVICE_ACCOUNT: ${{ secrets.K8S_SA }}
        run: |
          TOKEN=$(echo "$TOKEN" | tr -d '\n')
          echo "$KUBE_CA_CERT_BASE64" | base64 --decode > /tmp/ca.pem
          kubectl config set-cluster "$CLUSTER_NAME" \
            --server="$API_SERVER" \
            --certificate-authority=/tmp/ca.pem
          kubectl config set-credentials $SERVICE_ACCOUNT --token="$TOKEN"
          kubectl config set-context $CONTEXT --cluster="$CLUSTER_NAME" --user=$SERVICE_ACCOUNT 
          kubectl config use-context $CONTEXT

      - name: Deploy IBM Mainnet Scrapers
        run: |
          for i in 002 003; do
            echo "Deploying scraper mainnet node $i"
            cd lumina-infra/helmcharts/decentral-feeders/${i}-scraper-mainnet-ibm
            helm upgrade --install -n lumina-mainnet --set repository.tag="${{ env.RELEASE_TAG }}" $i-scraper-mainnet .
            cd -
          done

      - name: Deploy IBM Testnet Simulation
        run: |
          for i in 102 103; do
            echo "Deploying simulation feeder $i"
            cd lumina-infra/helmcharts/decentral-feeders/${i}-simulation-testnet-ibm
            helm upgrade --install -n dia-lumina --set repository.tag="${{ env.RELEASE_TAG }}" $i-simulation-testnet .
            cd -
          done
          if [ -f /tmp/ca.pem ]; then shred -u /tmp/ca.pem; fi

      # Hetzner Cluster Deployment
      - name: Hetzner Cluster kubectl config
        env:
          TOKEN: ${{ secrets.K8S_SERVICE_ACCOUNT_TOKEN_HETZNER }}
          CLUSTER_NAME: ${{ secrets.K8s_CLUSTER_NAME_HETZNER }}
          CONTEXT: ${{ secrets.K8s_CONTEXT_HETZNER }}
          API_SERVER: ${{ secrets.K8S_API_SERVER_HETZNER }}
          KUBE_CA_CERT_BASE64: ${{ secrets.KUBE_CA_CERT_BASE64_HETZNER }}
          SERVICE_ACCOUNT: ${{ secrets.K8S_SA }}
        run: |
          TOKEN=$(echo "$TOKEN" | tr -d '\n')
          echo "$KUBE_CA_CERT_BASE64" | base64 --decode > /tmp/ca.pem
          kubectl config set-cluster "$CLUSTER_NAME" \
            --server="$API_SERVER" \
            --certificate-authority=/tmp/ca.pem
          kubectl config set-credentials $SERVICE_ACCOUNT --token="$TOKEN"
          kubectl config set-context $CONTEXT --cluster="$CLUSTER_NAME" --user=$SERVICE_ACCOUNT
          kubectl config use-context $CONTEXT

      - name: Deploy Hetzner Testnet Scraper
        run: |
          echo "Deploying scraper feeder 005"
          cd lumina-infra/helmcharts/decentral-feeders/005-scraper-testnet-hetzner
          helm upgrade --install -n dia-lumina --set repository.tag="${{ env.RELEASE_TAG }}" 005-scraper-testnet .
          cd -

      - name: Deploy Hetzner Testnet Simulation
        run: |
          echo "Deploying simulation feeder 104"
          cd lumina-infra/helmcharts/decentral-feeders/104-simulation-testnet-hetzner
          helm upgrade --install -n dia-lumina --set repository.tag="${{ env.RELEASE_TAG }}" 104-simulation-testnet .
          cd -
          if [ -f /tmp/ca.pem ]; then shred -u /tmp/ca.pem; fi

      # Civo Cluster Deployment
      - name: Civo Cluster kubectl config
        env:
          TOKEN: ${{ secrets.K8S_SERVICE_ACCOUNT_TOKEN_CIVO }}
          CLUSTER_NAME: ${{ secrets.K8s_CLUSTER_NAME_CIVO }}
          CONTEXT: ${{ secrets.K8s_CONTEXT_CIVO }}
          API_SERVER: ${{ secrets.K8S_API_SERVER_CIVO }}
          KUBE_CA_CERT_BASE64: ${{ secrets.KUBE_CA_CERT_BASE64_CIVO }}
          SERVICE_ACCOUNT: ${{ secrets.K8S_SA }}
        run: |
          TOKEN=$(echo "$TOKEN" | tr -d '\n')
          echo "$KUBE_CA_CERT_BASE64" | base64 --decode > /tmp/ca.pem
          kubectl config set-cluster "$CLUSTER_NAME" \
            --server="$API_SERVER" \
            --certificate-authority=/tmp/ca.pem
          kubectl config set-credentials $SERVICE_ACCOUNT --token="$TOKEN"
          kubectl config set-context $CONTEXT --cluster="$CLUSTER_NAME" --user=$SERVICE_ACCOUNT
          kubectl config use-context $CONTEXT

      - name: Deploy Civo Testnet Scraper
        run: |
          echo "Deploying scraper feeder 006"
          cd lumina-infra/helmcharts/decentral-feeders/006-scraper-testnet-civo
          helm upgrade --install -n dia-lumina --set repository.tag="${{ env.RELEASE_TAG }}" 006-scraper-testnet .
          cd -

      - name: Deploy Civo Testnet Simulation
        run: |
          echo "Deploying simulation feeder 105"
          cd lumina-infra/helmcharts/decentral-feeders/105-simulation-testnet-civo
          helm upgrade --install -n dia-lumina --set repository.tag="${{ env.RELEASE_TAG }}" 105-simulation-testnet .
          cd -
          if [ -f /tmp/ca.pem ]; then shred -u /tmp/ca.pem; fi

      # Cleanup
      - name: Cleanup
        run: |
          rm -rf lumina-infra
          if [ -f /tmp/ca.pem ]; then
            shred -u /tmp/ca.pem
          fi
          ibmcloud logout 