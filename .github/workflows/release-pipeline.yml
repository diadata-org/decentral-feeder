name: decentralized-feeder-release-pipeline

on:
  release:
    types: [created]
  workflow_dispatch:  # Allows manual triggering


permissions:
  contents: read
  packages: write
  deployments: write
  id-token: none

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - uses: actions/checkout@v4

      # Set up Go
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      # Get dependencies
      - name: Get dependencies
        run: go mod tidy

      # Build the Go application
      - name: Build
        run: go build -v ./...

      # Test the Go application
      - name: Test
        run: go test -v ./...

      # Install IBM Cloud CLI and Container Registry CLI
      - name: Install IBM Cloud CLI
        run: |
          curl -fsSL https://clis.cloud.ibm.com/install/linux | sh
          ibmcloud plugin install container-registry -f

      # Build and Push Docker images to IBM Cloud Container Registry
      - name: Build and Push to IBM Cloud Container Registry
        env:
          IBM_CLOUD_API_KEY: ${{ secrets.IBM_CLOUD_API_KEY }}
        run: |
          # Log in to IBM Cloud Container Registry
          ibmcloud login --apikey $IBM_CLOUD_API_KEY --no-region
          ibmcloud target -r us-south
          ibmcloud target -g Default
          ibmcloud cr login

          # Build and push to IBM Cloud Container Registry
          docker build -f build/Dockerfile-luminaScraperFeeder \
            -t us.icr.io/dia-registry/oracles/diadecentraloracleservice:${{ github.event.release.tag_name }} .
          docker push us.icr.io/dia-registry/oracles/diadecentraloracleservice:${{ github.event.release.tag_name }}

          docker build -f build/Dockerfile-luminaSimulationFeeder \
            -t us.icr.io/dia-registry/oracles/luminasimulationfeeder:${{ github.event.release.tag_name }} .
          docker push us.icr.io/dia-registry/oracles/luminasimulationfeeder:${{ github.event.release.tag_name }}
          ibmcloud logout

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # Build and Push Docker images to Docker Hub
      - name: Build and Push to Docker Hub
        run: |
          # Build and push to Docker Hub
          docker build -f build/Dockerfile-luminaScraperFeeder \
            -t diadata/decentralized-feeder:scraper-${{ github.event.release.tag_name }} .
          docker push diadata/decentralized-feeder:scraper-${{ github.event.release.tag_name }}

          docker build -f build/Dockerfile-luminaSimulationFeeder \
            -t diadata/decentralized-feeder:simulation-${{ github.event.release.tag_name }} .
          docker push diadata/decentralized-feeder:simulation-${{ github.event.release.tag_name }}

      # Checkout the lumina-infra repository
      - name: Checkout lumina-infra repository
        env:
          LUMINA_INFRA_PAT: ${{ secrets.LUMINA_INFRA_PAT }}
        run: |
          git clone -q https://$LUMINA_INFRA_PAT@github.com/diadata-org/lumina-infra lumina-infra

      # Install kubectl
      - name: Install kubectl
        run: |
          curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      # IBM Cluster kubectl config
      - name: IBM Cluster kubectl config 
        env:
          TOKEN: ${{ secrets.K8S_SERVICE_ACCOUNT_TOKEN_PROD }}
          CLUSTER_NAME: ${{ secrets.K8s_CLUSTER_NAME_IBM }}
          CONTEXT: ${{ secrets.K8s_CONTEXT_IBM }}
          API_SERVER:  ${{ secrets.K8S_API_SERVER_IBM }}
          KUBE_CA_CERT_BASE64: ${{ secrets.KUBE_CA_CERT_BASE64_IBM }}
          SERVICE_ACCOUNT: ${{ secrets.K8S_SA }}
        run: |
          TOKEN=$(echo "$TOKEN" | tr -d '\n')
          echo "$KUBE_CA_CERT_BASE64" | base64 --decode > /tmp/ca.pem
          kubectl config set-cluster "$CLUSTER_NAME" \
            --server="$API_SERVER" \
            --certificate-authority=/tmp/ca.pem
          kubectl config set-credentials $SERVICE_ACCOUNT --token="$TOKEN"
          kubectl config set-context $CONTEXT --cluster="$CLUSTER_NAME" --user=$SERVICE_ACCOUNT 
          kubectl config use-context $CONTEXT

      # Helm upgrade/install 02-06 conduit nodes to IBM Cluster
    #   - name: Helm upgrade/install 02-06 conduit nodes to IBM Cluster
    #     run: |
    #       for i in $(seq -w 002 006); do
    #         echo "Deploying node $i"
    #         cd lumina-infra/helmcharts/decentral-feeders/$i
    #         helm upgrade --install -n dia-lumina --set repository.tag="${{ github.event.release.tag_name }}" diaoracleservice-conduit-$i .
    #         cd -
    #       done

      # Helm upgrade/install simulation feeder 02 to IBM Cluster
      - name: Helm upgrade/install simulation feeder 02 to IBM Cluster
        run: |
          echo "Deploying simulation feeder 02"
          cd lumina-infra/helmcharts/decentral-feeders/002/simulation
          helm upgrade --install -n dia-lumina --set repository.tag="${{ github.event.release.tag_name }}" lumina-simulation-feeder-002 .
          cd
          # Clean up CA certificate immediately
          if [ -f /tmp/ca.pem ]; then shred -u /tmp/ca.pem; fi

    #   # Hetzner Cluster kubectl config
    #   - name: Hetzner Cluster kubectl config
    #     env:
    #       TOKEN: ${{ secrets.K8S_SERVICE_ACCOUNT_TOKEN_HETZNER }}
    #       CLUSTER_NAME: ${{ secrets.K8s_CLUSTER_NAME_HETZNER }}
    #       CONTEXT: ${{ secrets.K8s_CONTEXT_HETZNER }}
    #       API_SERVER:  ${{ secrets.K8S_API_SERVER_HETZNER }}
    #       KUBE_CA_CERT_BASE64: ${{ secrets.KUBE_CA_CERT_BASE64_HETZNER }}
    #       SERVICE_ACCOUNT: ${{ secrets.K8S_SA }}
    #     run: |
    #       TOKEN=$(echo "$TOKEN" | tr -d '\n')
    #       echo "$KUBE_CA_CERT_BASE64" | base64 --decode > /tmp/ca.pem
    #       kubectl config set-cluster "$CLUSTER_NAME" \
    #         --server="$API_SERVER" \
    #         --certificate-authority=/tmp/ca.pem
    #       kubectl config set-credentials $SERVICE_ACCOUNT --token="$TOKEN"
    #       kubectl config set-context $CONTEXT --cluster="$CLUSTER_NAME" --user=$SERVICE_ACCOUNT
    #       kubectl config use-context $CONTEXT
  
    #   # Helm upgrade/install 07-011 conduit nodes to Hetzner Cluster
    #   - name: Helm upgrade/install 07-011 conduit nodes to Hetzner Cluster
    #     run: |
    #       for i in $(seq -w 007 011); do
    #         echo "Deploying node $i"
    #         cd lumina-infra/helmcharts/decentral-feeders/$i
    #         helm upgrade --install -n dia-lumina --set repository.tag="${{ github.event.release.tag_name }}" diaoracleservice-conduit-$i .
    #         cd -
    #       done
    #       cd

    #   # Helm upgrade/install simulation feeders 07 and 08 to Hetzner Cluster
    #   - name: Helm upgrade/install simulation feeders 07 and 08 to Hetzner Cluster
    #     run: |
    #       for i in 007 008; do
    #         echo "Deploying simulation feeder $i"
    #         cd lumina-infra/helmcharts/decentral-feeders/$i/simulation
    #         helm upgrade --install -n dia-lumina --set repository.tag="${{ github.event.release.tag_name }}" lumina-simulation-feeder-$i .
    #         cd -
    #       done
    #       cd
    #       # Clean up CA certificate immediately
    #       if [ -f /tmp/ca.pem ]; then shred -u /tmp/ca.pem; fi

    #   # Civo Cluster kubectl config
    #   - name: Civo Cluster kubectl config
    #     env:
    #       TOKEN: ${{ secrets.K8S_SERVICE_ACCOUNT_TOKEN_CIVO }}
    #       CLUSTER_NAME: ${{ secrets.K8s_CLUSTER_NAME_CIVO }}
    #       CONTEXT: ${{ secrets.K8s_CONTEXT_CIVO }}
    #       API_SERVER:  ${{ secrets.K8S_API_SERVER_CIVO }}
    #       KUBE_CA_CERT_BASE64: ${{ secrets.KUBE_CA_CERT_BASE64_CIVO }}
    #       SERVICE_ACCOUNT: ${{ secrets.K8S_SA }}
    #     run: |
    #       TOKEN=$(echo "$TOKEN" | tr -d '\n')
    #       echo "$KUBE_CA_CERT_BASE64" | base64 --decode > /tmp/ca.pem
    #       kubectl config set-cluster "$CLUSTER_NAME" \
    #         --server="$API_SERVER" \
    #         --certificate-authority=/tmp/ca.pem
    #       kubectl config set-credentials $SERVICE_ACCOUNT --token="$TOKEN"
    #       kubectl config set-context $CONTEXT --cluster="$CLUSTER_NAME" --user=$SERVICE_ACCOUNT
    #       kubectl config use-context $CONTEXT
  
    #   # Helm upgrade/install conduit-node-012 and conduit-node-016 to Civo Cluster
    #   - name: Helm upgrade/install conduit-node-012 and conduit-node-016 to Civo Cluster
    #     run: |
    #       for i in $(seq -w 012 016); do
    #         echo "Deploying node $i"
    #         cd lumina-infra/helmcharts/decentral-feeders/$i
    #         helm upgrade --install -n dia-lumina --set repository.tag="${{ github.event.release.tag_name }}" diaoracleservice-conduit-$i .
    #         cd -
    #       done
    #       cd

    #   # Helm upgrade/install simulation feeders 012 and 013 to Civo Cluster
    #   - name: Helm upgrade/install simulation feeders 012 and 013 to Civo Cluster
    #     run: |
    #       for i in 012 013; do
    #         echo "Deploying simulation feeder $i"
    #         cd lumina-infra/helmcharts/decentral-feeders/$i/simulation
    #         helm upgrade --install -n dia-lumina --set repository.tag="${{ github.event.release.tag_name }}" lumina-simulation-feeder-$i .
    #         cd -
    #       done
    #       cd
    #       # Clean up CA certificate immediately
    #       if [ -f /tmp/ca.pem ]; then shred -u /tmp/ca.pem; fi
          
    #   - name: Update Helm manifests for nodes 017-021 (repository.tag)
    #     run: |
    #       # Navigate to the helm-deployments/apps directory in the cloned repository
    #       cd lumina-infra/argocd/helm-deployments/apps
      
    #       # Loop over each node file and update the repository.tag line
    #       for node in 017 018 019 020 021; do
    #         echo "Updating values-node${node}.yaml"
    #         sed -i "s/^\(\s*tag:\s*\)commit-hash-[a-zA-Z0-9]\+/\1${{ github.event.release.tag_name }}/" values-node${node}.yaml
    #       done
      
    #       # Configure Git with a generic identity for the commit
    #       git config user.email "github_actions@github.com"
    #       git config user.name "github_actions"
      
    #       # Check if there are any changes; if yes, commit and push them.
    #       if [ -n "$(git status --porcelain)" ]; then
    #         git add values-node*.yaml
    #         git commit -m "Update repository tag in values-node017-021.yaml to ${{ github.event.release.tag_name }}"
    #         git push origin master
    #       else
    #         echo "No changes detected in values-node*.yaml; nothing to commit."
    #       fi

      # Cleanup the cloned repository
      - name: Cleanup cloned repository and logout from IBM
        run: |
          rm -rf lumina-infra
          if [ -f /tmp/ca.pem ]; then
            shred -u /tmp/ca.pem
          fi
          ibmcloud logout
